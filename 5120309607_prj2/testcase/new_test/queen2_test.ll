@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
;#PROGRAM: EXTDEFS#

@.str1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
;#PROGRAM: EXTDEFS#

@ptr_a.line1  = common global [ 100 x i32] zeroinitializer, align 4
;#EXTVARS:VAR , EXTVARS# ->> #EXTDEF: TYPE EXTVARS ;# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

@ptr_v.line1  = common global [ 100 x i32] zeroinitializer, align 4
;#EXTVARS:VAR , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTDEF: TYPE EXTVARS ;# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

@ptr_c.line1  = common global [ 100 x i32] zeroinitializer, align 4
;#EXTVARS:VAR , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTDEF: TYPE EXTVARS ;# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

@ptr_b.line1  = common global [ 100 x i32] zeroinitializer, align 4
;#EXTVARS:VAR , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTDEF: TYPE EXTVARS ;# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

@ptr_s.line1  = common global i32 0, align 4
;#EXTVARS:VAR ASSIGN INIT , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTDEF: TYPE EXTVARS ;# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

@ptr_n.line1  = common global i32 0, align 4
;#EXTVARS: VAR# ->> #EXTVARS:VAR ASSIGN INIT , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTVARS:VAR , EXTVARS# ->> #EXTDEF: TYPE EXTVARS ;# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

define i32 @print() #0
;#FUNC: ID ( PARAS )# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

{
;#STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%ptr_i.line5  = alloca i32 , align 4
;#DECS: VAR# ->> #DEFS: TYPE DECS ; DEFS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_1 = load i32* %ptr_i.line5, align 4
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

    store i32 1, i32* %ptr_i.line5, align 4
;#=# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

br label %label.for.ix1.cond
;#STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

label.for.ix1.cond:
;#STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_2 = load i32* %ptr_i.line5, align 4
;#EXPS: ID ARRS# ->> #<# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_3 = load i32* @ptr_n.line1, align 4
;#EXPS: ID ARRS# ->> #<# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_4= icmp slt i32 %r_2, %r_3
 ; set retType to i1
;#<# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  br i1 %r_4, label %label.for.ix1.body, label %label.for.ix1.end
;#STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

label.for.ix1.body:
;#STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_5 = load i32* %ptr_i.line5, align 4
;#EXPS: ID ARRS# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #STMT: write ( EXPS )# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_6 = getelementptr inbounds [ 100 x i32]* @ptr_b.line1, i32 0, i32 %r_5
;#EXPS: ID ARRS# ->> #STMT: write ( EXPS )# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_7 = load i32* %r_6, align 4
;#EXPS: ID ARRS# ->> #STMT: write ( EXPS )# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%tmp_8 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 %r_7)
;#STMT: write ( EXPS )# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

 %r_9 = load i32* %ptr_i.line5, align 4
;#EXPS: UNARYOP EXPS# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

   %r_10 = add nsw i32 %r_9, 1
;#EXPS: UNARYOP EXPS# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

   store i32 %r_10, i32* %ptr_i.line5, align 4
;#EXPS: UNARYOP EXPS# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  br label %label.for.ix1.cond
;#STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

label.for.ix1.end:
;#STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_11 = load i32* @ptr_n.line1, align 4
;#EXPS: ID ARRS# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #STMT: write ( EXPS )# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_12 = getelementptr inbounds [ 100 x i32]* @ptr_b.line1, i32 0, i32 %r_11
;#EXPS: ID ARRS# ->> #STMT: write ( EXPS )# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_13 = load i32* %r_12, align 4
;#EXPS: ID ARRS# ->> #STMT: write ( EXPS )# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%tmp_14 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 %r_13)
;#STMT: write ( EXPS )# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

ret i32 0
;#STMT: RETURN EXPS ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

}
;#STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

define i32 @DFS( i32 %x ) #0
;#FUNC: ID ( PARAS )# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

{
;#STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

    %ptr_x.line39para = alloca i32, align 4
;#STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

    store i32 %x, i32* %ptr_x.line39para, align 4
;#STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%ptr_i.line16  = alloca i32 , align 4
;#DECS: VAR, DECS# ->> #DEFS: TYPE DECS ; DEFS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%ptr_j.line16  = alloca i32 , align 4
;#DECS: VAR, DECS# ->> #DECS: VAR, DECS# ->> #DEFS: TYPE DECS ; DEFS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%ptr_k.line16  = alloca i32 , align 4
;#DECS: VAR# ->> #DECS: VAR, DECS# ->> #DECS: VAR, DECS# ->> #DEFS: TYPE DECS ; DEFS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_15 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #># ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_16 = load i32* @ptr_n.line1, align 4
;#EXPS: ID ARRS# ->> #># ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_17= icmp sgt i32 %r_15, %r_16
;#># ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

 %r_18 = icmp ne i1 %r_17, 0
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  br i1 %r_18, label %label.if.ix1.then, label %label.if.ix1.end
 
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

label.if.ix1.then:
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_19 = load i32* @ptr_s.line1, align 4
;#EXPS: ID ARRS# ->> #<# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_20= icmp slt i32 %r_19, 3
 ; set retType to i1
;#<# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

 %r_21 = icmp ne i1 %r_20, 0
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  br i1 %r_21, label %label.if.ix2.then, label %label.if.ix2.end
 
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

label.if.ix2.then:
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_22 = call i32 @print()
;#EXPS: ID ( ARGS )# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

br label %label.if.ix2.end
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

label.if.ix2.end:
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

 %r_23 = load i32* @ptr_s.line1, align 4
;#EXPS: UNARYOP EXPS# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

   %r_24 = add nsw i32 %r_23, 1
;#EXPS: UNARYOP EXPS# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

   store i32 %r_24, i32* @ptr_s.line1, align 4
;#EXPS: UNARYOP EXPS# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

ret i32 0
;#STMT: RETURN EXPS ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

br label %label.if.ix1.end
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

label.if.ix1.end:
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_26 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

    store i32 1, i32* %ptr_i.line16, align 4
;#=# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

br label %label.for.ix2.cond
;#STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

label.for.ix2.cond:
;#STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_27 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #<# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_28 = load i32* @ptr_n.line1, align 4
;#EXPS: ID ARRS# ->> #+# ->> #<# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_29= add nsw i32 %r_28, 1
;#+# ->> #<# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_30= icmp slt i32 %r_27, %r_29
 ; set retType to i1
;#<# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  br i1 %r_30, label %label.for.ix2.body, label %label.for.ix2.end
;#STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

label.for.ix2.body:
;#STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_31 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_32 = getelementptr inbounds [ 100 x i32]* @ptr_a.line1, i32 0, i32 %r_31
;#EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_33 = load i32* %r_32, align 4
;#EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

   %r_34 = icmp eq i32 %r_33, 0
;#EXPS: UNARYOP EXPS# ->> #&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_35 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_36 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_37= add nsw i32 %r_35, %r_36
;#+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_38 = getelementptr inbounds [ 100 x i32]* @ptr_v.line1, i32 0, i32 %r_37
;#EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_39 = load i32* %r_38, align 4
;#EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

   %r_40 = icmp eq i32 %r_39, 0
;#EXPS: UNARYOP EXPS# ->> #&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_42 = icmp ne i1 %r_34, 0
;#&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_43 = icmp ne i1 %r_40, 0
;#&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

 %r_41 = and i1 %r_42, %r_43
;#&&# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_44 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_45 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_46= sub nsw i32 %r_44, %r_45
;#-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_47= add nsw i32 %r_46, 15
;#+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_48 = getelementptr inbounds [ 100 x i32]* @ptr_c.line1, i32 0, i32 %r_47
;#EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_49 = load i32* %r_48, align 4
;#EXPS: ID ARRS# ->> #EXPS: UNARYOP EXPS# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

   %r_50 = icmp eq i32 %r_49, 0
;#EXPS: UNARYOP EXPS# ->> #&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_52 = icmp ne i1 %r_41, 0
;#&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_53 = icmp ne i1 %r_50, 0
;#&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

 %r_51 = and i1 %r_52, %r_53
;#&&# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

 %r_54 = icmp ne i1 %r_51, 0
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  br i1 %r_54, label %label.if.ix3.then, label %label.if.ix3.end
 
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

label.if.ix3.then:
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_56 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_57 = getelementptr inbounds [ 100 x i32]* @ptr_a.line1, i32 0, i32 %r_56
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_58 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_59 = getelementptr inbounds [ 100 x i32]* @ptr_a.line1, i32 0, i32 %r_58
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_60 = load i32* %r_59, align 4
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

    store i32 1, i32* %r_57, align 4
;#=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_62 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_63 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_64= add nsw i32 %r_62, %r_63
;#+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_65 = getelementptr inbounds [ 100 x i32]* @ptr_v.line1, i32 0, i32 %r_64
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_66 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_67 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_68= add nsw i32 %r_66, %r_67
;#+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_69 = getelementptr inbounds [ 100 x i32]* @ptr_v.line1, i32 0, i32 %r_68
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_70 = load i32* %r_69, align 4
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

    store i32 1, i32* %r_65, align 4
;#=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_72 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_73 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_74= sub nsw i32 %r_72, %r_73
;#-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_75= add nsw i32 %r_74, 15
;#+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_76 = getelementptr inbounds [ 100 x i32]* @ptr_c.line1, i32 0, i32 %r_75
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_77 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_78 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_79= sub nsw i32 %r_77, %r_78
;#-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_80= add nsw i32 %r_79, 15
;#+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_81 = getelementptr inbounds [ 100 x i32]* @ptr_c.line1, i32 0, i32 %r_80
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_82 = load i32* %r_81, align 4
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

    store i32 1, i32* %r_76, align 4
;#=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_84 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_85 = getelementptr inbounds [ 100 x i32]* @ptr_b.line1, i32 0, i32 %r_84
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_86 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_87 = getelementptr inbounds [ 100 x i32]* @ptr_b.line1, i32 0, i32 %r_86
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_88 = load i32* %r_87, align 4
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_89 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

    store i32 %r_89, i32* %r_85, align 4
;#=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_90 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #+# ->> #EXP: EXPS# ->> #args# ->> #EXPS: ID ( ARGS )# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_91= add nsw i32 %r_90, 1
;#+# ->> #EXP: EXPS# ->> #args# ->> #EXPS: ID ( ARGS )# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_92 = call i32 @DFS( i32 %r_91 )
;#EXPS: ID ( ARGS )# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_94 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_95 = getelementptr inbounds [ 100 x i32]* @ptr_a.line1, i32 0, i32 %r_94
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_96 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_97 = getelementptr inbounds [ 100 x i32]* @ptr_a.line1, i32 0, i32 %r_96
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_98 = load i32* %r_97, align 4
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

    store i32 0, i32* %r_95, align 4
;#=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_100 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_101 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_102= add nsw i32 %r_100, %r_101
;#+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_103 = getelementptr inbounds [ 100 x i32]* @ptr_v.line1, i32 0, i32 %r_102
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_104 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_105 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_106= add nsw i32 %r_104, %r_105
;#+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_107 = getelementptr inbounds [ 100 x i32]* @ptr_v.line1, i32 0, i32 %r_106
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_108 = load i32* %r_107, align 4
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

    store i32 0, i32* %r_103, align 4
;#=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_110 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_111 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_112= sub nsw i32 %r_110, %r_111
;#-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_113= add nsw i32 %r_112, 15
;#+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_114 = getelementptr inbounds [ 100 x i32]* @ptr_c.line1, i32 0, i32 %r_113
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_115 = load i32* %ptr_i.line16, align 4
;#EXPS: ID ARRS# ->> #-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_116 = load i32* %ptr_x.line39para, align 4
;#EXPS: ID ARRS# ->> #-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_117= sub nsw i32 %r_115, %r_116
;#-# ->> #+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_118= add nsw i32 %r_117, 15
;#+# ->> #ARRS: [ EXPS ]# ->> #EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_119 = getelementptr inbounds [ 100 x i32]* @ptr_c.line1, i32 0, i32 %r_118
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_120 = load i32* %r_119, align 4
;#EXPS: ID ARRS# ->> #=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

    store i32 0, i32* %r_114, align 4
;#=# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

br label %label.if.ix3.end
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

label.if.ix3.end:
;#STMT: if ( EXPS ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #STMT: STMTBLOCK# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

 %r_121 = load i32* %ptr_i.line16, align 4
;#EXPS: UNARYOP EXPS# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

   %r_122 = add nsw i32 %r_121, 1
;#EXPS: UNARYOP EXPS# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

   store i32 %r_122, i32* %ptr_i.line16, align 4
;#EXPS: UNARYOP EXPS# ->> #EXP: EXPS# ->> #STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  br label %label.for.ix2.cond
;#STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

label.for.ix2.end:
;#STMT: for ( EXP ; EXP ; EXP ) STMT# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

ret i32 0
;#STMT: RETURN EXPS ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

}
;#STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

define i32 @main() #0
;#FUNC: ID ( PARAS )# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

{
;#STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

 %tmp_123 = call i32 (i8*, ...)* @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8]* @.str, i32 0, i32 0), i32* @ptr_n.line1)
;#STMT: read ( EXPS )# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%r_124 = call i32 @DFS( i32 1 )
;#EXPS: ID ( ARGS )# ->> #EXP: EXPS# ->> #STMT: EXP ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

  %r_125 = load i32* @ptr_s.line1, align 4
;#EXPS: ID ARRS# ->> #STMT: write ( EXPS )# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

%tmp_126 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i32 %r_125)
;#STMT: write ( EXPS )# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

ret i32 0
;#STMT: RETURN EXPS ;# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTS: STMT STMTS# ->> #STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#

}
;#STMTBLOCK: { DEFS STMTS }# ->> #EXTDEF: TYPE FUNC STMTBLOCK# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #EXTDEFS: EXTDEF EXTDEFS# ->> #PROGRAM: EXTDEFS#


declare i32 @__isoc99_scanf(i8*, ...) #1
;#PROGRAM: EXTDEFS#

declare i32 @printf(i8*, ...) #1
;#PROGRAM: EXTDEFS#

attributes #0 = { nounwind uwtable "less-precise-fpmad"="false""no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
;#PROGRAM: EXTDEFS#

attributes #1 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
;#PROGRAM: EXTDEFS#

